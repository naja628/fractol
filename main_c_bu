#include <stdlib.h>
#include "mlx.h"
#include "ft_complex.h"
#include "im_buffer.h"
#include "ft_mapcomplex.h"
#include "keycodes.h"
#include "utils.h"
#include "ft_complex.h"

// zoom
// move around
// more precise

/* own file needed (probably) */
typedef struct s_view
{
	t_im	*im;
	t_cpx	topleft;
	double	pixsz;
	//void	*cmap_params;
}	t_view;

t_cpx	ft_cpx_xy(t_view *v, int x, int y)
{
	t_cpx z;

	z = ft_complex(x * v->pixsz, -y * v->pixsz);
	return (ft_addc(v->topleft, z));
}

void	ft_zoom_view(t_view *v, double zoom, int x, int y)
{
	v->topleft = ft_ccomb(ft_cpx_xy(v, x, y), v->topleft, 1 / zoom);
	v->pixsz /= zoom;
}

void	ft_recompute(void *win, t_view *v, t_cmap *f)
{
	ft_mapc(v->im, v->topleft, v->pixsz, f);
	mlx_put_image_to_window(v->im->mlx, win, v->im->im, 0, 0);  
}

/* sorta useless... */
void	ft_update_param(double dx, double *addr)
{
	*addr += dx;
}
/* end own file */

typedef struct
{
	int niter;
	t_cpx c;
}	t_params;

#define mauve

// pretty
#ifdef mauve
#define CV 0x200010
#define DV 0xa080ff
#endif

// pretty
#ifdef galaxy
#define CV 0x080020
#define DV 0xffffa0
#endif

#ifdef ink
#define CV 0xb0b0b0
#define DV 0x100030
#endif

// pretty
#ifdef shadow
#define CV 0x878787
#define DV 0x300040
#endif

#ifdef blood
#define CV 0xb0b0b0
#define DV 0x300010
#endif

// ugly
#ifdef venom
#define CV 0x103000
#define DV 0x300010
#endif

/* iterate z^2 + c up to niter times */
int	ft_julia(t_cpx z, void *data)
{
	t_params	*params;
	double		r;

	params = (t_params *) data;
	r = ft_modulus(params->c) + 1;
	int i;
	for (i = 0; i < params->niter; ++i)
	{
		z = ft_addc(ft_multc(z, z), params->c);
		if (ft_modulus(z) > r)
			break ;
	}
	return (ft_gradient(CV, DV, (double) i / (params->niter)));
}

int	bound_modulus(t_cpx z, void *data)
{
	(void) data;
	//printf("%f maps to %x\n,", 1.0 - exp(-ft_modulus(z)), 
	//		   (unsigned int) (0xff * (1.0 - exp(-ft_modulus(z)))));
	return ((unsigned int) (0xffffff * 
			(1.0 - exp(-ft_modulus(z)))));
	//return ft_gradient(0xffffff, 0, 1.0 - exp(-ft_modulus(z)));
}

typedef struct s_state
{
	void *win;
	t_view *view;
	t_cmap *f;
	int	*precision;
}	t_state;


int	quitter(int keycode, void *params)
{
	(void) params;
   	if (keycode == ESC)
		exit(0); // TODO free stuff
	return (0);
}

#define ZOOM 1.2 
int	zoomer(int button, int x, int y, void *params)
{
	t_state	*s;
	double	zoom;

	s = (t_state *) params;
	if (button == MS_LEFT)
		*(s->precision) += 100;
	else 
		*(s->precision) = 60;
	if (button == SCROLL_UP)
		zoom = ZOOM;
	else if (button == SCROLL_DOWN)
		zoom = 1 / ZOOM;
	else if (button != MS_LEFT)
		return (0);
	if (button == SCROLL_UP || button == SCROLL_DOWN)
		ft_zoom_view(s->view, zoom, x, y);
	ft_recompute(s->win, s->view, s->f);
	return (0);
}

#include <stdio.h>
int main()
{
	void *mlx = mlx_init();
	void *win = mlx_new_window(mlx, 900, 900, "bouh");
	t_im *im = ft_init_im(mlx, 900, 900);
	
	//t_params params = {300, ft_complex(-0.122, 0.744)};
	t_params params = {60, ft_complex(-0.8, 0.156)};
	t_cmap f = ft_new_map(ft_julia, (void *) &params);
	printf("map created\n");

	t_view v = {im, ft_complex(-2, 2), 4.0 / 900};
	t_state s = {win, &v, &f, &(params.niter)};
	printf("state inited\n");

	ft_recompute(win, &v, &f);
	printf("Show Me Pretty \n");
	mlx_key_hook(win, quitter, NULL);
	mlx_mouse_hook(win, zoomer, &s);

	mlx_loop(mlx);
}

